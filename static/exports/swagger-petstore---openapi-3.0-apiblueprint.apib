FORMAT: 1A
HOST: https://petstore3.swagger.io/api/v3

# Swagger Petstore - OpenAPI 3.0
This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

## Authentication
This API uses Custom Header for its authentication.

The parameters that are needed to be sent for this type of authentication are as follows:
+ `api_key`

# Group pet

Everything about your Pets

## Pet [/pet]

### updatePet [PUT]
Update an existing pet by Id.
+ Attributes
    + name (string, required)

        + Sample: doggie
    + photoUrls (array[string], required)

    + id (number, optional)

        + Sample: 10
    + category (Category, optional)

    + tags (array[Tag], optional)

    + status (enum[string], optional)

        pet status in the store

        + Members
            + `available` 
            + `pending` 
            + `sold` 


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Successful operation

    + Attributes (Pet)



+ Response 200 (application/xml)

        Successful operation

    + Attributes (Pet)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Pet not found




+ Response 422 

        Validation exception




### addPet [POST]
Add a new pet to the store.
+ Attributes
    + name (string, required)

        + Sample: doggie
    + photoUrls (array[string], required)

    + id (number, optional)

        + Sample: 10
    + category (Category, optional)

    + tags (array[Tag], optional)

    + status (enum[string], optional)

        pet status in the store

        + Members
            + `available` 
            + `pending` 
            + `sold` 


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Successful operation

    + Attributes (Pet)



+ Response 200 (application/xml)

        Successful operation

    + Attributes (Pet)



+ Response 400 

        Invalid input




+ Response 422 

        Validation exception





## Pet FindByStatus [/pet/findByStatus{?status}]

### findPetsByStatus [GET]
Multiple status values can be provided with comma separated strings.
+ Parameters
    + status (enum[string], optional)

        Status values that need to be considered for filter

        + Members
            + `available` 
            + `pending` 
            + `sold` 


+ Response 200 (application/json)

        successful operation

    + Attributes (array[Pet])



+ Response 200 (application/xml)

        successful operation

    + Attributes (array[Pet])



+ Response 400 

        Invalid status value





## Pet FindByTags [/pet/findByTags{?tags}]

### findPetsByTags [GET]
Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
+ Parameters
    + tags (array[string], optional)

        Tags to filter by


+ Response 200 (application/json)

        successful operation

    + Attributes (array[Pet])



+ Response 200 (application/xml)

        successful operation

    + Attributes (array[Pet])



+ Response 400 

        Invalid tag value





## Pet By PetId [/pet/{petId}]

+ Parameters
    + petId (number, required)

        ID of pet to return

        + Sample: 10

### getPetById [GET]
Returns a single pet.

+ Response 200 (application/json)

        successful operation

    + Attributes (Pet)



+ Response 200 (application/xml)

        successful operation

    + Attributes (Pet)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Pet not found




### deletePet [DELETE]
Delete a pet.

+ Request 
    + Headers

            api_key:<<Add Header Value>>





+ Response 200 

        Pet deleted




+ Response 400 

        Invalid pet value





## Pet By PetId [/pet/{petId}{?name,status}]

+ Parameters
    + petId (number, required)

        ID of pet that needs to be updated

        + Sample: 10

### updatePetWithForm [POST]
Updates a pet resource based on the form data.
+ Parameters
    + name (string, optional)

        Name of pet that needs to be updated

    + status (string, optional)

        Status of pet that needs to be updated


+ Response 200 (application/json)

        successful operation

    + Attributes (Pet)



+ Response 200 (application/xml)

        successful operation

    + Attributes (Pet)



+ Response 400 

        Invalid input





## Pet UploadImage By PetId [/pet/{petId}/uploadImage{?additionalMetadata}]

+ Parameters
    + petId (number, required)

        ID of pet to update

        + Sample: 10

### uploadFile [POST]
Upload image of the pet.
+ Parameters
    + additionalMetadata (string, optional)

        Additional Metadata

+ Attributes
    + body (string, optional)


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        successful operation

    + Attributes (ApiResponse)



+ Response 400 

        No file uploaded




+ Response 404 

        Pet not found






# Group store

Access to Petstore orders

## Store Inventory [/store/inventory]

### getInventory [GET]
Returns a map of status codes to quantities.

+ Response 200 (application/json)

        successful operation

    + Attributes (number)




## Store Order [/store/order]

### placeOrder [POST]
Place a new order in the store.
+ Attributes
    + id (number, optional)

        + Sample: 10
    + petId (number, optional)

        + Sample: 198772
    + quantity (number, optional)

        + Sample: 7
    + shipDate (string, optional)

    + status (enum[string], optional)

        Order Status

        + Members
            + `placed` 
            + `approved` 
            + `delivered` 

    + complete (boolean, optional)


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        successful operation

    + Attributes (Order)



+ Response 400 

        Invalid input




+ Response 422 

        Validation exception





## Store Order By OrderId [/store/order/{orderId}]

+ Parameters
    + orderId (number, required)

        ID of order that needs to be fetched


### getOrderById [GET]
For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.

+ Response 200 (application/json)

        successful operation

    + Attributes (Order)



+ Response 200 (application/xml)

        successful operation

    + Attributes (Order)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Order not found




### deleteOrder [DELETE]
For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.

+ Response 200 

        order deleted




+ Response 400 

        Invalid ID supplied




+ Response 404 

        Order not found






# Group user

Operations about user

## User [/user]

### createUser [POST]
This can only be done by the logged in user.
+ Attributes
    + id (number, optional)

        + Sample: 10
    + username (string, optional)

        + Sample: theUser
    + firstName (string, optional)

        + Sample: John
    + lastName (string, optional)

        + Sample: James
    + email (string, optional)

        + Sample: john@email.com
    + password (string, optional)

        + Sample: 12345
    + phone (string, optional)

        + Sample: 12345
    + userStatus (number, optional)

        User Status

        + Sample: 1

+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        successful operation

    + Attributes (User)



+ Response 200 (application/xml)

        successful operation

    + Attributes (User)




## User CreateWithList [/user/createWithList]

### createUsersWithListInput [POST]
Creates list of users with given input array.

+ Request (<<Add Header Value>>)

    + Attributes (array[User])



+ Response 200 (application/json)

        Successful operation

    + Attributes (User)



+ Response 200 (application/xml)

        Successful operation

    + Attributes (User)




## User Login [/user/login{?username,password}]

### loginUser [GET]
Log into the system.
+ Parameters
    + username (string, optional)

        The user name for login

    + password (string, optional)

        The password for login in clear text


+ Response 200 (application/xml)

        successful operation

    + Attributes (string)



+ Response 200 (application/json)

        successful operation

    + Attributes (string)



+ Response 400 

        Invalid username/password supplied





## User Logout [/user/logout]

### logoutUser [GET]
Log user out of the system.

+ Response 200 

        successful operation





## User By Usersname [/user/{usersname}]

+ Parameters
    + usersname (string, required)

        The username that needs to be processed


### getUserByName [GET]
Get user detail based on username.

+ Response 200 (application/json)

        successful operation

    + Attributes (User)



+ Response 200 (application/xml)

        successful operation

    + Attributes (User)



+ Response 400 

        Invalid username supplied




+ Response 404 

        User not found




### updateUser [PUT]
This can only be done by the logged in user.
+ Attributes
    + id (number, optional)

        + Sample: 10
    + username (string, optional)

        + Sample: theUser
    + firstName (string, optional)

        + Sample: John
    + lastName (string, optional)

        + Sample: James
    + email (string, optional)

        + Sample: john@email.com
    + password (string, optional)

        + Sample: 12345
    + phone (string, optional)

        + Sample: 12345
    + userStatus (number, optional)

        User Status

        + Sample: 1

+ Request (<<Add Header Value>>)




+ Response 200 

        successful operation




+ Response 400 

        bad request




+ Response 404 

        user not found




### deleteUser [DELETE]
This can only be done by the logged in user.

+ Response 200 

        User deleted




+ Response 400 

        Invalid username supplied




+ Response 404 

        User not found






# Data Structures

## Order (object)


### Properties
+ `id` (number, optional) 
+ `petId` (number, optional) 
+ `quantity` (number, optional) 
+ `shipDate` (string, optional) 
+ `status` (enum[string], optional) - Order Status
    + `placed`
    + `approved`
    + `delivered`
+ `complete` (boolean, optional) 


## Category (object)


### Properties
+ `id` (number, optional) 
+ `name` (string, optional) 


## User (object)


### Properties
+ `id` (number, optional) 
+ `username` (string, optional) 
+ `firstName` (string, optional) 
+ `lastName` (string, optional) 
+ `email` (string, optional) 
+ `password` (string, optional) 
+ `phone` (string, optional) 
+ `userStatus` (number, optional) - User Status


## Tag (object)


### Properties
+ `id` (number, optional) 
+ `name` (string, optional) 


## Pet (object)


### Properties
+ `id` (number, optional) 
+ `name` (string, required) 
+ `category` (Category, optional) 
+ `photoUrls` (array[string], required) 
+ `tags` (array[Tag], optional) 
+ `status` (enum[string], optional) - pet status in the store
    + `available`
    + `pending`
    + `sold`


## ApiResponse (object)


### Properties
+ `code` (number, optional) 
+ `type` (string, optional) 
+ `message` (string, optional) 

