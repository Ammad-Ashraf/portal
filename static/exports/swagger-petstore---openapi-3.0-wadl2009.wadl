<?xml version="1.0" encoding="utf-8"?>
<application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:schemas="https://petstore3.swagger.io/api/v3/schemas" xmlns="http://wadl.dev.java.net/2009/02">
  <doc title="Swagger Petstore - OpenAPI 3.0" xml:lang="en">This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)</doc>
  <grammars>
    <xs:schema xmlns:tns="https://petstore3.swagger.io/api/v3/schemas" targetNamespace="https://petstore3.swagger.io/api/v3/schemas" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="order" type="schemas:order" />
      <xs:element name="category" type="schemas:category" />
      <xs:element name="user" type="schemas:user" />
      <xs:element name="tag" type="schemas:tag" />
      <xs:element name="pet" type="schemas:pet" />
      <xs:element name="default" type="schemas:default" />
      <xs:element name="PetStatus" type="schemas:PetStatus" />
      <xs:element name="OrderStatus" type="schemas:OrderStatus" />
      <xs:element name="updatePet200_Response0" type="schemas:updatePet200_Response0" />
      <xs:element name="updatePet200_Response1" type="schemas:updatePet200_Response1" />
      <xs:element name="addPet200_Response0" type="schemas:addPet200_Response0" />
      <xs:element name="addPet200_Response1" type="schemas:addPet200_Response1" />
      <xs:element name="findPetsByStatus200_Response0" type="schemas:findPetsByStatus200_Response0" />
      <xs:element name="findPetsByStatus200_Response1" type="schemas:findPetsByStatus200_Response1" />
      <xs:element name="findPetsByTags200_Response0" type="schemas:findPetsByTags200_Response0" />
      <xs:element name="findPetsByTags200_Response1" type="schemas:findPetsByTags200_Response1" />
      <xs:element name="getPetById200_Response0" type="schemas:getPetById200_Response0" />
      <xs:element name="getPetById200_Response1" type="schemas:getPetById200_Response1" />
      <xs:element name="updatePetWithForm200_Response0" type="schemas:updatePetWithForm200_Response0" />
      <xs:element name="updatePetWithForm200_Response1" type="schemas:updatePetWithForm200_Response1" />
      <xs:element name="uploadFile200_Response0" type="schemas:uploadFile200_Response0" />
      <xs:element name="getInventory200_Response0" type="schemas:getInventory200_Response0" />
      <xs:element name="placeOrder200_Response0" type="schemas:placeOrder200_Response0" />
      <xs:element name="getOrderById200_Response0" type="schemas:getOrderById200_Response0" />
      <xs:element name="getOrderById200_Response1" type="schemas:getOrderById200_Response1" />
      <xs:element name="createUser200_Response0" type="schemas:createUser200_Response0" />
      <xs:element name="createUser200_Response1" type="schemas:createUser200_Response1" />
      <xs:element name="createUsersWithListInput_Request" type="schemas:createUsersWithListInput_Request" />
      <xs:element name="createUsersWithListInput200_Response0" type="schemas:createUsersWithListInput200_Response0" />
      <xs:element name="createUsersWithListInput200_Response1" type="schemas:createUsersWithListInput200_Response1" />
      <xs:element name="response200" type="xs:string">
        <xs:annotation>
          <xs:documentation>successful operation</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="response2001" type="xs:string">
        <xs:annotation>
          <xs:documentation>successful operation</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="getUserByName200_Response0" type="schemas:getUserByName200_Response0" />
      <xs:element name="getUserByName200_Response1" type="schemas:getUserByName200_Response1" />
      <xs:complexType name="order">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="petId" type="xs:long" />
          <xs:element minOccurs="0" name="quantity" type="xs:integer" />
          <xs:element minOccurs="0" name="shipDate" type="xs:dateTime" />
          <xs:element minOccurs="0" name="status" type="schemas:OrderStatus">
            <xs:annotation>
              <xs:documentation>Order Status</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="complete" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="category">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="name" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="user">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="username" type="xs:string" />
          <xs:element minOccurs="0" name="firstName" type="xs:string" />
          <xs:element minOccurs="0" name="lastName" type="xs:string" />
          <xs:element minOccurs="0" name="email" type="xs:string" />
          <xs:element minOccurs="0" name="password" type="xs:string" />
          <xs:element minOccurs="0" name="phone" type="xs:string" />
          <xs:element minOccurs="0" name="userStatus" type="xs:integer">
            <xs:annotation>
              <xs:documentation>User Status</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="tag">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="name" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pet">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="1" name="name" type="xs:string" />
          <xs:element minOccurs="0" name="category" type="schemas:category" />
          <xs:element name="photoUrls">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="1" maxOccurs="unbounded" name="photoUrl" type="xs:string" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="tags">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" name="tags" type="schemas:tag" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="status" type="schemas:PetStatus">
            <xs:annotation>
              <xs:documentation>pet status in the store</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="default">
        <xs:sequence>
          <xs:element minOccurs="0" name="code" type="xs:integer" />
          <xs:element minOccurs="0" name="type" type="xs:string" />
          <xs:element minOccurs="0" name="message" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="PetStatus">
        <xs:annotation>
          <xs:documentation>pet status in the store</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="available" />
          <xs:enumeration value="pending" />
          <xs:enumeration value="sold" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="OrderStatus">
        <xs:annotation>
          <xs:documentation>Order Status</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="placed" />
          <xs:enumeration value="approved" />
          <xs:enumeration value="delivered" />
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="updatePet200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>Successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatePet200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="pet" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>Successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addPet200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>Successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addPet200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="pet" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>Successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByStatus200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="response200" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByStatus200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="pet" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByTags200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="response200" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByTags200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="pet" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPetById200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPetById200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="pet" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatePetWithForm200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatePetWithForm200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="pet" type="schemas:pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="uploadFile200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:default">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getInventory200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="xs:integer">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="placeOrder200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:order">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getOrderById200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:order">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getOrderById200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="order" type="schemas:order">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUser200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:user">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUser200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="user" type="schemas:user">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUsersWithListInput_Request">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="body" type="schemas:user" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUsersWithListInput200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:user">
            <xs:annotation>
              <xs:documentation>Successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUsersWithListInput200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="user" type="schemas:user">
            <xs:annotation>
              <xs:documentation>Successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getUserByName200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response200" type="schemas:user">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getUserByName200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="user" type="schemas:user">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </grammars>
  <resources base="https://petstore3.swagger.io/api/v3">
    <resource id="_pet" path="/pet">
      <method id="updatePet" name="PUT">
        <doc title="updatePet" xml:lang="en">Update an existing pet by Id.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/x-www-form-urlencoded" required="true" fixed="application/x-www-form-urlencoded">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation mediaType="application/x-www-form-urlencoded">
            <param name="name" style="query" type="xsd:string" required="true">
              <doc title="name" xml:lang="en" />
            </param>
            <param name="photoUrls" style="query" type="xsd:string" required="true" repeating="true">
              <doc title="photoUrls" xml:lang="en" />
            </param>
            <param name="id" style="query" type="xsd:long">
              <doc title="id" xml:lang="en" />
            </param>
            <param name="category" style="query" type="schemas:category">
              <doc title="category" xml:lang="en" />
            </param>
            <param name="tags" style="query" type="schemas:tag" repeating="true">
              <doc title="tags" xml:lang="en" />
            </param>
            <param name="status" style="query">
              <doc title="status" xml:lang="en">pet status in the store</doc>
              <option value="available">
                <doc title="available" xml:lang="en" />
              </option>
              <option value="pending">
                <doc title="pending" xml:lang="en" />
              </option>
              <option value="sold">
                <doc title="sold" xml:lang="en" />
              </option>
            </param>
          </representation>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Successful operation</doc>
          <representation element="schemas:updatePet200_Response0" mediaType="application/json" />
          <representation element="schemas:updatePet200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Pet not found</doc>
        </response>
        <response status="422">
          <doc title="422" xml:lang="en">Validation exception</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
      <method id="addPet" name="POST">
        <doc title="addPet" xml:lang="en">Add a new pet to the store.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/x-www-form-urlencoded" required="true" fixed="application/x-www-form-urlencoded">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation mediaType="application/x-www-form-urlencoded">
            <param name="name" style="query" type="xsd:string" required="true">
              <doc title="name" xml:lang="en" />
            </param>
            <param name="photoUrls" style="query" type="xsd:string" required="true" repeating="true">
              <doc title="photoUrls" xml:lang="en" />
            </param>
            <param name="id" style="query" type="xsd:long">
              <doc title="id" xml:lang="en" />
            </param>
            <param name="category" style="query" type="schemas:category">
              <doc title="category" xml:lang="en" />
            </param>
            <param name="tags" style="query" type="schemas:tag" repeating="true">
              <doc title="tags" xml:lang="en" />
            </param>
            <param name="status" style="query">
              <doc title="status" xml:lang="en">pet status in the store</doc>
              <option value="available">
                <doc title="available" xml:lang="en" />
              </option>
              <option value="pending">
                <doc title="pending" xml:lang="en" />
              </option>
              <option value="sold">
                <doc title="sold" xml:lang="en" />
              </option>
            </param>
          </representation>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Successful operation</doc>
          <representation element="schemas:addPet200_Response0" mediaType="application/json" />
          <representation element="schemas:addPet200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid input</doc>
        </response>
        <response status="422">
          <doc title="422" xml:lang="en">Validation exception</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_petfindByStatus" path="/pet/findByStatus">
      <method id="findPetsByStatus" name="GET">
        <doc title="findPetsByStatus" xml:lang="en">Multiple status values can be provided with comma separated strings.</doc>
        <request>
          <param name="status" style="query">
            <doc title="status" xml:lang="en">Status values that need to be considered for filter</doc>
            <option value="available">
              <doc title="available" xml:lang="en" />
            </option>
            <option value="pending">
              <doc title="pending" xml:lang="en" />
            </option>
            <option value="sold">
              <doc title="sold" xml:lang="en" />
            </option>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:findPetsByStatus200_Response0" mediaType="application/json" />
          <representation element="schemas:findPetsByStatus200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid status value</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_petfindByTags" path="/pet/findByTags">
      <method id="findPetsByTags" name="GET">
        <doc title="findPetsByTags" xml:lang="en">Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</doc>
        <request>
          <param name="tags" style="query" type="xsd:string" repeating="true">
            <doc title="tags" xml:lang="en">Tags to filter by</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:findPetsByTags200_Response0" mediaType="application/json" />
          <representation element="schemas:findPetsByTags200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid tag value</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_petpetId" path="/pet/{petId}">
      <param name="petId" style="template" type="xsd:long" required="true">
        <doc title="petId" xml:lang="en">ID of pet to return</doc>
      </param>
      <param name="petId" style="template" type="xsd:long" required="true">
        <doc title="petId" xml:lang="en">ID of pet that needs to be updated</doc>
      </param>
      <param name="petId" style="template" type="xsd:long" required="true">
        <doc title="petId" xml:lang="en">Pet id to delete</doc>
      </param>
      <method id="getPetById" name="GET">
        <doc title="getPetById" xml:lang="en">Returns a single pet.</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getPetById200_Response0" mediaType="application/json" />
          <representation element="schemas:getPetById200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Pet not found</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
      <method id="updatePetWithForm" name="POST">
        <doc title="updatePetWithForm" xml:lang="en">Updates a pet resource based on the form data.</doc>
        <request>
          <param name="name" style="query" type="xsd:string">
            <doc title="name" xml:lang="en">Name of pet that needs to be updated</doc>
          </param>
          <param name="status" style="query" type="xsd:string">
            <doc title="status" xml:lang="en">Status of pet that needs to be updated</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:updatePetWithForm200_Response0" mediaType="application/json" />
          <representation element="schemas:updatePetWithForm200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid input</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
      <method id="deletePet" name="DELETE">
        <doc title="deletePet" xml:lang="en">Delete a pet.</doc>
        <request>
          <param name="api_key" style="header" type="xsd:string">
            <doc title="api_key" xml:lang="en" />
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Pet deleted</doc>
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid pet value</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_petpetIduploadImage" path="/pet/{petId}/uploadImage">
      <param name="petId" style="template" type="xsd:long" required="true">
        <doc title="petId" xml:lang="en">ID of pet to update</doc>
      </param>
      <method id="uploadFile" name="POST">
        <doc title="uploadFile" xml:lang="en">Upload image of the pet.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/octet-stream" required="true" fixed="application/octet-stream">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <param name="additionalMetadata" style="query" type="xsd:string">
            <doc title="additionalMetadata" xml:lang="en">Additional Metadata</doc>
          </param>
          <representation mediaType="multipart/form-data">
            <param name="body" style="query" type="xsd:hexBinary">
              <doc title="body" xml:lang="en" />
            </param>
          </representation>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:uploadFile200_Response0" mediaType="application/json" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">No file uploaded</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Pet not found</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_storeinventory" path="/store/inventory">
      <method id="getInventory" name="GET">
        <doc title="getInventory" xml:lang="en">Returns a map of status codes to quantities.</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getInventory200_Response0" mediaType="application/json" />
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_storeorder" path="/store/order">
      <method id="placeOrder" name="POST">
        <doc title="placeOrder" xml:lang="en">Place a new order in the store.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/x-www-form-urlencoded" required="true" fixed="application/x-www-form-urlencoded">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation mediaType="application/x-www-form-urlencoded">
            <param name="id" style="query" type="xsd:long">
              <doc title="id" xml:lang="en" />
            </param>
            <param name="petId" style="query" type="xsd:long">
              <doc title="petId" xml:lang="en" />
            </param>
            <param name="quantity" style="query" type="xsd:integer">
              <doc title="quantity" xml:lang="en" />
            </param>
            <param name="shipDate" style="query" type="xsd:dateTime">
              <doc title="shipDate" xml:lang="en" />
            </param>
            <param name="status" style="query">
              <doc title="status" xml:lang="en">Order Status</doc>
              <option value="placed">
                <doc title="placed" xml:lang="en" />
              </option>
              <option value="approved">
                <doc title="approved" xml:lang="en" />
              </option>
              <option value="delivered">
                <doc title="delivered" xml:lang="en" />
              </option>
            </param>
            <param name="complete" style="query" type="xsd:boolean">
              <doc title="complete" xml:lang="en" />
            </param>
          </representation>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:placeOrder200_Response0" mediaType="application/json" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid input</doc>
        </response>
        <response status="422">
          <doc title="422" xml:lang="en">Validation exception</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_storeorderorderId" path="/store/order/{orderId}">
      <param name="orderId" style="template" type="xsd:long" required="true">
        <doc title="orderId" xml:lang="en">ID of order that needs to be fetched</doc>
      </param>
      <param name="orderId" style="template" type="xsd:long" required="true">
        <doc title="orderId" xml:lang="en">ID of the order that needs to be deleted</doc>
      </param>
      <method id="getOrderById" name="GET">
        <doc title="getOrderById" xml:lang="en">For valid response try integer IDs with value &lt;= 5 or &gt; 10. Other values will generate exceptions.</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getOrderById200_Response0" mediaType="application/json" />
          <representation element="schemas:getOrderById200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Order not found</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
      <method id="deleteOrder" name="DELETE">
        <doc title="deleteOrder" xml:lang="en">For valid response try integer IDs with value &lt; 1000. Anything above 1000 or non-integers will generate API errors.</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">order deleted</doc>
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Order not found</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_user" path="/user">
      <method id="createUser" name="POST">
        <doc title="createUser" xml:lang="en">This can only be done by the logged in user.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/x-www-form-urlencoded" required="true" fixed="application/x-www-form-urlencoded">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation mediaType="application/x-www-form-urlencoded">
            <param name="id" style="query" type="xsd:long">
              <doc title="id" xml:lang="en" />
            </param>
            <param name="username" style="query" type="xsd:string">
              <doc title="username" xml:lang="en" />
            </param>
            <param name="firstName" style="query" type="xsd:string">
              <doc title="firstName" xml:lang="en" />
            </param>
            <param name="lastName" style="query" type="xsd:string">
              <doc title="lastName" xml:lang="en" />
            </param>
            <param name="email" style="query" type="xsd:string">
              <doc title="email" xml:lang="en" />
            </param>
            <param name="password" style="query" type="xsd:string">
              <doc title="password" xml:lang="en" />
            </param>
            <param name="phone" style="query" type="xsd:string">
              <doc title="phone" xml:lang="en" />
            </param>
            <param name="userStatus" style="query" type="xsd:integer">
              <doc title="userStatus" xml:lang="en">User Status</doc>
            </param>
          </representation>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:createUser200_Response0" mediaType="application/json" />
          <representation element="schemas:createUser200_Response1" mediaType="application/xml" />
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_usercreateWithList" path="/user/createWithList">
      <method id="createUsersWithListInput" name="POST">
        <doc title="createUsersWithListInput" xml:lang="en">Creates list of users with given input array.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:createUsersWithListInput_Request" mediaType="application/json" />
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Successful operation</doc>
          <representation element="schemas:createUsersWithListInput200_Response0" mediaType="application/json" />
          <representation element="schemas:createUsersWithListInput200_Response1" mediaType="application/xml" />
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_userlogin" path="/user/login">
      <method id="loginUser" name="GET">
        <doc title="loginUser" xml:lang="en">Log into the system.</doc>
        <request>
          <param name="username" style="query" type="xsd:string">
            <doc title="username" xml:lang="en">The user name for login</doc>
          </param>
          <param name="password" style="query" type="xsd:string">
            <doc title="password" xml:lang="en">The password for login in clear text</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <param name="X-Rate-Limit" style="plain" type="xsd:integer" required="true">
            <doc title="X-Rate-Limit" xml:lang="en">calls per hour allowed by the user</doc>
          </param>
          <param name="X-Expires-After" style="plain" type="xsd:dateTime" required="true">
            <doc title="X-Expires-After" xml:lang="en">date in UTC when token expires</doc>
          </param>
          <representation element="schemas:response200" mediaType="application/xml" />
          <representation element="schemas:response2001" mediaType="application/json" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid username/password supplied</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_userlogout" path="/user/logout">
      <method id="logoutUser" name="GET">
        <doc title="logoutUser" xml:lang="en">Log user out of the system.</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
    <resource id="_userusersname" path="/user/{usersname}">
      <param name="usersname" style="template" type="xsd:string" required="true">
        <doc title="usersname" xml:lang="en">The username that needs to be processed</doc>
      </param>
      <param name="usersname" style="template" type="xsd:string" required="true">
        <doc title="usersname" xml:lang="en">The username that needs to be processed</doc>
      </param>
      <param name="usersname" style="template" type="xsd:string" required="true">
        <doc title="usersname" xml:lang="en">The username that needs to be processed</doc>
      </param>
      <method id="getUserByName" name="GET">
        <doc title="getUserByName" xml:lang="en">Get user detail based on username.</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getUserByName200_Response0" mediaType="application/json" />
          <representation element="schemas:getUserByName200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid username supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">User not found</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
      <method id="updateUser" name="PUT">
        <doc title="updateUser" xml:lang="en">This can only be done by the logged in user.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/x-www-form-urlencoded" required="true" fixed="application/x-www-form-urlencoded">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation mediaType="application/x-www-form-urlencoded">
            <param name="id" style="query" type="xsd:long">
              <doc title="id" xml:lang="en" />
            </param>
            <param name="username" style="query" type="xsd:string">
              <doc title="username" xml:lang="en" />
            </param>
            <param name="firstName" style="query" type="xsd:string">
              <doc title="firstName" xml:lang="en" />
            </param>
            <param name="lastName" style="query" type="xsd:string">
              <doc title="lastName" xml:lang="en" />
            </param>
            <param name="email" style="query" type="xsd:string">
              <doc title="email" xml:lang="en" />
            </param>
            <param name="password" style="query" type="xsd:string">
              <doc title="password" xml:lang="en" />
            </param>
            <param name="phone" style="query" type="xsd:string">
              <doc title="phone" xml:lang="en" />
            </param>
            <param name="userStatus" style="query" type="xsd:integer">
              <doc title="userStatus" xml:lang="en">User Status</doc>
            </param>
          </representation>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">bad request</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">user not found</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
      <method id="deleteUser" name="DELETE">
        <doc title="deleteUser" xml:lang="en">This can only be done by the logged in user.</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">User deleted</doc>
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid username supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">User not found</doc>
        </response>
        <response status="0">
          <doc title="0" xml:lang="en">Unexpected error</doc>
        </response>
      </method>
    </resource>
  </resources>
</application>