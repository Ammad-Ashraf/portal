# API Name: "Swagger Petstore - OpenAPI 3.0"
# Host: https://petstore3.swagger.io/api/v3
# This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

"pet status in the store"
enum PetStatus {
    AVAILABLE
    PENDING
    SOLD
}

"Order Status"
enum OrderStatus {
    APPROVED
    DELIVERED
    PLACED
}

type Order {
    id: Int!
    petId: Int!
    quantity: Int!
    shipDate: String!
    "Order Status"
    status: OrderStatus!
    complete: Boolean!
}

type Category {
    id: Int!
    name: String!
}

type User {
    id: Int!
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phone: String!
    "User Status"
    userStatus: Int!
}

type Tag {
    id: Int!
    name: String!
}

type Pet {
    id: Int!
    name: String!
    category: Category!
    photoUrls: [String!]
    tags: [Tag!]
    "pet status in the store"
    status: PetStatus!
}

type ApiResponse {
    code: Int!
    type: String!
    message: String!
}

input CategoryInput {
    id: Int!
    name: String!
}

input TagInput {
    id: Int!
    name: String!
}

input UpdatePetInput {
    contentType: String!
    name: String!
    photoUrls: [String!]
    id: Int!
    category: CategoryInput!
    tags: [TagInput!]
    "pet status in the store"
    status: PetStatus!
    apiKey: String!
}

input AddPetInput {
    contentType: String!
    name: String!
    photoUrls: [String!]
    id: Int!
    category: CategoryInput!
    tags: [TagInput!]
    "pet status in the store"
    status: PetStatus!
    apiKey: String!
}

input FindPetsByStatusInput {
    "Status values that need to be considered for filter"
    status: PetStatus!
    apiKey: String!
}

input FindPetsByTagsInput {
    "Tags to filter by"
    tags: [String!]
    apiKey: String!
}

input GetPetByIdInput {
    "ID of pet to return"
    petId: Int!
    apiKey: String!
}

input UpdatePetWithFormInput {
    "ID of pet that needs to be updated"
    petId: Int!
    "Name of pet that needs to be updated"
    name: String!
    "Status of pet that needs to be updated"
    status: String!
    apiKey: String!
}

input DeletePetInput {
    "Pet id to delete"
    petId: Int!
    apiKey: String!
    apiKey1: String!
}

input UploadFileInput {
    "ID of pet to update"
    petId: Int!
    contentType: String!
    "Additional Metadata"
    additionalMetadata: String!
    body: String!
    apiKey: String!
}

input GetInventoryInput {
    apiKey: String!
}

input CreatePlaceorderInput {
    contentType: String!
    id: Int!
    petId: Int!
    quantity: Int!
    shipDate: String!
    "Order Status"
    status: OrderStatus!
    complete: Boolean!
    apiKey: String!
}

input GetOrderByIdInput {
    "ID of order that needs to be fetched"
    orderId: Int!
    apiKey: String!
}

input DeleteOrderInput {
    "ID of the order that needs to be deleted"
    orderId: Int!
    apiKey: String!
}

input CreateUserInput {
    contentType: String!
    id: Int!
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phone: String!
    "User Status"
    userStatus: Int!
    apiKey: String!
}

input UserInput {
    id: Int!
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phone: String!
    "User Status"
    userStatus: Int!
}

input CreateUsersWithListInput1 {
    contentType: String!
    body: [UserInput!]
    apiKey: String!
}

input GetLoginuserInput {
    "The user name for login"
    username: String!
    "The password for login in clear text"
    password: String!
    apiKey: String!
}

input GetLogoutuserInput {
    apiKey: String!
}

input GetUserByNameInput {
    "The username that needs to be processed"
    usersname: String!
    apiKey: String!
}

input UpdateUserInput {
    "The username that needs to be processed"
    usersname: String!
    contentType: String!
    id: Int!
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phone: String!
    "User Status"
    userStatus: Int!
    apiKey: String!
}

input DeleteUserInput {
    "The username that needs to be processed"
    usersname: String!
    apiKey: String!
}

type Query {
    "Multiple status values can be provided with comma separated strings."
    findPetsByStatus(input: FindPetsByStatusInput!): [Pet!]
    "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
    findPetsByTags(input: FindPetsByTagsInput!): [Pet!]
    "Returns a single pet."
    getPetById(input: GetPetByIdInput!): Pet!
    "Returns a map of status codes to quantities."
    getInventory(input: GetInventoryInput!): Int!
    "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions."
    getOrderById(input: GetOrderByIdInput!): Order!
    "Log into the system."
    getLoginuser(input: GetLoginuserInput!): String!
    "Log user out of the system."
    getLogoutuser(input: GetLogoutuserInput!): String
    "Get user detail based on username."
    getUserByName(input: GetUserByNameInput!): User!
}

type Mutation {
    "Update an existing pet by Id."
    updatePet(input: UpdatePetInput!): Pet!
    "Add a new pet to the store."
    addPet(input: AddPetInput!): Pet!
    "Updates a pet resource based on the form data."
    updatePetWithForm(input: UpdatePetWithFormInput!): Pet!
    "Delete a pet."
    deletePet(input: DeletePetInput!): String
    "Upload image of the pet."
    uploadFile(input: UploadFileInput!): ApiResponse!
    "Place a new order in the store."
    createPlaceorder(input: CreatePlaceorderInput!): Order!
    "For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors."
    deleteOrder(input: DeleteOrderInput!): String
    "This can only be done by the logged in user."
    createUser(input: CreateUserInput!): User!
    "Creates list of users with given input array."
    createUsersWithListInput(input: CreateUsersWithListInput1!): User!
    "This can only be done by the logged in user."
    updateUser(input: UpdateUserInput!): String
    "This can only be done by the logged in user."
    deleteUser(input: DeleteUserInput!): String
}

schema {
    mutation: Mutation
    query: Query
}
